MAKE CHANGES Review edits and craft a commit transaction 
$ git status 
Lists all new or modified files to be committed 
$ git add [file] 
Snapshots the file in preparation for versioning 
$ git reset [file] 
Unstages the file, but preserve its contents 
V 1.1.1 
Git is the open source distributed version control system that facilitates GitHub activities on your laptop or desktop. This cheat sheet summarizes commonly used Git command line instructions for quick reference. 
INSTALL GIT GitHub provides desktop clients that include a graphical user interface for the most common repository actions and an automati- cally updating command line edition of Git for advanced scenarios. 
GitHub for Windows https://windows.github.com 
GitHub for Mac https://mac.github.com 
Git distributions for Linux and POSIX systems are available on the official Git SCM web site. 
Git for All Platforms http://git-scm.com 
$ git diff 
Shows file differences not yet staged 
$ git diff --staged 
Shows file differences between staging and the last file version 
CONFIGURE TOOLING 
$ git commit -m "[descriptive message]" Configure user information for all local repositories 
Records file snapshots permanently in version history 
$ git config --global user.name "[name]" 
Sets the name you want attached to your commit transactions 
$ git config --global user.email "[email address]" 
Sets the email you want attached to your commit transactions 
$ git config --global color.ui auto 
Enables helpful colorization of command line output 
CREATE REPOSITORIES Start a new repository or obtain one from an existing URL 
$ git init [project-name] 
Creates a new local repository with the specified name 
$ git clone [url] 
Downloads a project and its entire version history 
GROUP CHANGES Name a series of commits and combine completed efforts 
$ git branch 
Lists all local branches in the current repository 
$ git branch [branch-name] 
Creates a new branch 
$ git checkout [branch-name] 
Switches to the specified branch and updates the working directory 
$ git merge [branch] 
Combines the specified branch’s history into the current branch 
$ git branch -d [branch-name] 
Deletes the specified branch 
GIT CHEAT SHEET 
REFACTOR FILENAMES 
REVIEW HISTORY Relocate and remove versioned files 
Browse and inspect the evolution of project files 
$ git rm [file] 
$ git log 
Deletes the file from the working directory and stages the deletion 
Lists version history for the current branch 
$ git rm --cached [file] 
$ git log --follow [file] 
Removes the file from version control but preserves the file locally 
Lists version history for a file, including renames 
$ git mv [file-original] [file-renamed] 
$ git diff [first-branch]...[second-branch] 
Changes the file name and prepares it for commit 
Shows content differences between two branches 
$ git show [commit] 
Outputs metadata and content changes of the specified commit SUPPRESS TRACKING Exclude temporary files and paths 
*.log build/ 
$ git ls-files --other --ignored --exclude-standard 
Lists all ignored files in this project 
SAVE FRAGMENTS 
SYNCHRONIZE CHANGES Shelve and restore incomplete changes 
Register a repository bookmark and exchange version history 
$ git stash 
$ git fetch [bookmark] 
Temporarily stores all modified tracked files 
Downloads all history from the repository bookmark 
$ git merge [bookmark]/[branch] 
Combines bookmark’s branch into current local branch 
$ git stash list 
$ git push [alias] [branch] 
Lists all stashed changesets 
Uploads all local branch commits to GitHub 
$ git pull 
Downloads bookmark history and incorporates changes REDO COMMITS Erase mistakes and craft replacement history temp-* 
A text file named .gitignore suppresses accidental versioning of 
$ git reset [commit] 
files and paths matching the specified patterns 
Undoes all commits after [commit], preserving changes locally 
$ git reset --hard [commit] 
Discards all history and changes back to the specified commit 
$ git stash pop 
Restores the most recently stashed files 
$ git stash drop 
Discards the most recently stashed changeset 
Learn more about using GitHub and Git. Email the Training Team or visit our web site for learning event schedules and private class availability. 
training@github.com training.github.com 
